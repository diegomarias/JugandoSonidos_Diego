
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Diego
 */
public class Sonidos extends javax.swing.JFrame {
    JFileChooser selector;
    File fichero;
    ImageIcon icono;
    ImageIcon icono2;
    Clip sonido;
    /**
     * Creates new form Sonidos
     */
    public Sonidos() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelecciona = new javax.swing.JButton();
        jButtonReproduce = new javax.swing.JButton();
        jButtonRepite = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonPausar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSelecciona.setText("Seleccione un Archivo");
        jButtonSelecciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeleccionaActionPerformed(evt);
            }
        });

        jButtonReproduce.setText("Reproducir");
        jButtonReproduce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReproduceActionPerformed(evt);
            }
        });

        jButtonRepite.setText("Repetir");
        jButtonRepite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRepiteActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jButtonPausar.setText("Pausar");
        jButtonPausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPausarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jButtonSelecciona)
                        .addGap(39, 39, 39)
                        .addComponent(jButtonReproduce)
                        .addGap(48, 48, 48)
                        .addComponent(jButtonRepite)
                        .addGap(46, 46, 46)
                        .addComponent(jButtonPausar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelecciona)
                    .addComponent(jButtonReproduce)
                    .addComponent(jButtonRepite)
                    .addComponent(jButtonPausar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSeleccionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeleccionaActionPerformed
     explora();
    }//GEN-LAST:event_jButtonSeleccionaActionPerformed

    private void jButtonReproduceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReproduceActionPerformed
     
      reproduce();
    }//GEN-LAST:event_jButtonReproduceActionPerformed

    private void jButtonRepiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRepiteActionPerformed
        bucle();
    }//GEN-LAST:event_jButtonRepiteActionPerformed

    private void jButtonPausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPausarActionPerformed
        /*
        Tengo problemas para usar cualquier botón mientras el audio se está reproduciendo. 
        No me deja pulsar ninguno mientras el audio está en marcha con que no puedo probar el botón
        */
        
        pause();
    }//GEN-LAST:event_jButtonPausarActionPerformed
    private void explora(){
       selector = new JFileChooser();
       int seleccionado;
       FileNameExtensionFilter filtro;
       selector.setAcceptAllFileFilterUsed(false);
       filtro = new FileNameExtensionFilter("Archivos de Audio","wav", "au", "aif");
       selector.addChoosableFileFilter(filtro);
       selector.setCurrentDirectory(new File("."));
       seleccionado = selector.showOpenDialog(this);
       fichero = selector.getSelectedFile();
       if(seleccionado == JFileChooser.APPROVE_OPTION){
            JOptionPane.showMessageDialog(this, "Has seleccionado el archivo " + fichero.getName());
        }
       jLabel1.setText(fichero.getName());
    }
    
    private void reproduce(){
         try {       
            sonido = AudioSystem.getClip();
            sonido.open(AudioSystem.getAudioInputStream(fichero));
            System.out.println("Comienza la Reproducción");
            
            sonido.start();
            icono = new ImageIcon("altavoz1.png");
            Image img = icono.getImage();
            ImageIcon iconoEscalado = new ImageIcon( img.getScaledInstance(jLabel1.getWidth(),
            jLabel1.getHeight(), Image.SCALE_DEFAULT));
            jLabel1.setIcon(iconoEscalado);
            jLabel1.paintImmediately(jLabel1.getVisibleRect());
            while(!sonido.isRunning()) {
            System.out.println("Esperando...");
            Thread.sleep(10);
            }
            
                
            while(sonido.isRunning()){
                System.out.println("Reproduciendo...");
                Thread.sleep(1000);
                
            }
            
            sonido.close();
            icono2 = new ImageIcon("altavoz2.jpg");
            img = icono2.getImage();
            iconoEscalado = new ImageIcon( img.getScaledInstance(jLabel1.getWidth(),
                    jLabel1.getHeight(), Image.SCALE_DEFAULT));
            jLabel1.setIcon(iconoEscalado);
            System.out.println("Fin");
        } catch (LineUnavailableException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void bucle(){
        int respuesta = Integer.valueOf(JOptionPane.showInputDialog(this, "¿Cuántas veces quiere reproducirlo? (Introduza números por favor)"));
        try {
            sonido = AudioSystem.getClip();
            sonido.open(AudioSystem.getAudioInputStream(fichero));
            System.out.println("Comienza la Reproducción");
            sonido.loop(respuesta -1);
            icono = new ImageIcon("altavoz1.png");
            Image img = icono.getImage();
            ImageIcon iconoEscalado = new ImageIcon( img.getScaledInstance(jLabel1.getWidth(),
            jLabel1.getHeight(), Image.SCALE_DEFAULT));
            jLabel1.setIcon(iconoEscalado);
            jLabel1.paintImmediately(jLabel1.getVisibleRect());
            while(!sonido.isRunning()) {
            System.out.println("Esperando...");
            Thread.sleep(10);
            }
            while(sonido.isRunning()){
                System.out.println("Reproduciendo...");
                Thread.sleep(1000);
            }
            
            sonido.close();
            icono2 = new ImageIcon("altavoz2.jpg");
            img = icono2.getImage();
            iconoEscalado = new ImageIcon( img.getScaledInstance(jLabel1.getWidth(),
                    jLabel1.getHeight(), Image.SCALE_DEFAULT));
            jLabel1.setIcon(iconoEscalado);
            System.out.println("Fin");
        } catch (LineUnavailableException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(jugando.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void pause(){
        if (sonido.isRunning()){
            sonido.stop();
        }
        if (!sonido.isRunning()){
            sonido.start();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sonidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sonidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sonidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sonidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sonidos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPausar;
    private javax.swing.JButton jButtonRepite;
    private javax.swing.JButton jButtonReproduce;
    private javax.swing.JButton jButtonSelecciona;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
